// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register Input/Load
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=inARegister);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadARegister);
    ARegister(in=inARegister, load=loadARegister, out=outARegister);

    // D Register Input/Load
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadDRegister);
    DRegister(in=ALUOutput, load=loadDRegister, out=D);

    // ALU & outM Output
    Mux(a=false, b=instruction[12], sel=instruction[15], out=AMSel);
    Mux16(a=outARegister, b=inM, sel=AMSel, out=AM);
    Mux(a=false, b=instruction[11], sel=instruction[15], out=zx);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=nx);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=zy);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=ny);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=f);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=no);
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, zr=zrOut, ng=ngOut);
    And16(a=ALUOutput, b=ALUOutput, out=outM);

    // writeM Output
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    // addressM Output
    Bus16to15(in=outARegister, out=addressM);

    // Program Counter & pc Output
    Not(in=ngOut, out=JGE);
    Xor(a=JGE, b=zrOut, out=JGT);
    Not(in=zrOut, out=JNE);
    Or(a=zrOut, b=ngOut, out=JLE);
    Mux3(a=false, b=instruction[0..2], sel=instruction[15], out=PCSel);   
    Mux8Way(a=false, b=JGT, c=zrOut, d=JGE, e=ngOut, f=JNE, g=JLE, h=true, sel=PCSel, out=PCLoad);
    Not(in=PCLoad, out=PCInc);
    PC(in=outARegister, load=PCLoad, inc=PCInc, reset=reset, out=pc16);
    Bus16to15(in=pc16, out=pc);
}
